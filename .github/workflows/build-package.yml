name: Build PDS Package

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  PACKAGE_NAME: pds-funcs

jobs:
  lint:
    name: Lint Scripts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install shellcheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck

      - name: Run shellcheck
        run: |
          cd packaging
          make lint

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        arch: [all]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          # Extract version from tag or use default
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="1.0.0-dev.${GITHUB_SHA:0:8}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Building version: $VERSION"

      - name: Install nfpm
        run: |
          curl -sfL https://install.goreleaser.com/github.com/goreleaser/nfpm.sh | sh
          sudo mv ./bin/nfpm /usr/local/bin/

      - name: Update package version
        run: |
          cd packaging
          sed -i "s/version: .*/version: $VERSION/" nfpm.yaml
          sed -i "s/VERSION := .*/VERSION := $VERSION/" Makefile
          sed -i "s/PDS_VERSION=.*/PDS_VERSION=\"$VERSION\"/" init.sh bin/pds

      - name: Build package
        run: |
          cd packaging
          chmod +x build.sh
          ./build.sh build

      - name: Test package
        run: |
          cd packaging
          make test

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ env.VERSION }}-${{ matrix.arch }}
          path: packaging/dist/*.deb
          retention-days: 30

      - name: Show package info
        run: |
          cd packaging
          echo "Package built:"
          ls -la dist/
          echo
          echo "Package contents (first 20 files):"
          dpkg-deb -c dist/*.deb | head -20

  test-install:
    name: Test Installation
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        ubuntu-version: [20.04, 22.04, 24.04]
    steps:
      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ env.VERSION }}-all
          path: ./packages

      - name: Test installation on Ubuntu ${{ matrix.ubuntu-version }}
        run: |
          docker run --rm -v $(pwd)/packages:/packages ubuntu:${{ matrix.ubuntu-version }} /bin/bash -c "
            apt-get update &&
            apt-get install -y /packages/*.deb &&
            echo 'Testing PDS installation...' &&
            pds doctor &&
            pds info &&
            echo 'Installation test passed on Ubuntu ${{ matrix.ubuntu-version }}'
          "

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, test-install]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ env.VERSION }}-all
          path: ./release

      - name: Generate release notes
        run: |
          cat > release-notes.md << 'EOF'
          ## PDS (Personal Development Scripts) v${{ env.VERSION }}

          ### Installation

          #### Direct Installation
          ```bash
          # Download and install
          wget https://github.com/${{ github.repository }}/releases/download/v${{ env.VERSION }}/${{ env.PACKAGE_NAME }}_${{ env.VERSION }}_all.deb
          sudo dpkg -i ${{ env.PACKAGE_NAME }}_${{ env.VERSION }}_all.deb
          sudo apt-get install -f
          ```

          #### Usage
          ```bash
          # Check installation
          pds doctor

          # List available functions
          pds list

          # Example usage
          install_docker      # Install Docker
          install_vscode      # Install VS Code
          install_packer      # Install HashiCorp Packer
          ```

          ### What's Included

          - **Software Installation Functions**: Docker, VS Code, kubectl, Azure CLI, and more
          - **HashiCorp Tools**: Packer, Terraform, Vault, Consul installation functions
          - **UI/Theme Setup**: Font and theme installation for GNOME
          - **Development Environment**: Git and shell configuration tools
          - **CLI Helper**: `pds` command for function discovery and management

          ### Features

          ✅ Auto-loading in interactive shells  
          ✅ CLI helper for function discovery  
          ✅ Opt-out support (`export PDS_DISABLE=1`)  
          ✅ Comprehensive function library  
          ✅ Easy installation and updates via APT  

          ### Compatibility

          - Ubuntu 20.04, 22.04, 24.04
          - Debian 10, 11, 12
          - Any Debian-based distribution

          ### Documentation

          - [Installation Guide](https://github.com/${{ github.repository }}/blob/main/packaging/README.md)
          - [Function Reference](https://github.com/${{ github.repository }}/blob/main/bash/debian/readme.md)
          - [Contributing](https://github.com/${{ github.repository }}/blob/main/CONTRIBUTING.md)

          EOF

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: PDS v${{ env.VERSION }}
          body_path: release-notes.md
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/${{ env.PACKAGE_NAME }}_${{ env.VERSION }}_all.deb
          asset_name: ${{ env.PACKAGE_NAME }}_${{ env.VERSION }}_all.deb
          asset_content_type: application/vnd.debian.binary-package

  # Optional: Auto-update APT repository
  # deploy-repo:
  #   name: Update APT Repository
  #   runs-on: ubuntu-latest
  #   needs: release
  #   if: startsWith(github.ref, 'refs/tags/v')
  #   steps:
  #     - name: Deploy to APT repository
  #       run: |
  #         # Add your APT repository update logic here
  #         # This could involve aptly, reprepro, or a hosted service API
  #         echo "Would update APT repository here"
