name: Build APT Package
permissions:
  id-token: write
  contents: write
on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - packaging/**
      - bash/debian
      - bash/common
      - '!**/*.md'
      - '!.gitignore'
  pull_request:
    branches: [main]
    paths:
      - packaging/**
      - bash/debian
      - bash/common
      - '!**/*.md'
      - '!.gitignore'
env:
  PACKAGE_NAME: pds
jobs:
  version:
    name: Determine Version
    runs-on: ubuntu-latest
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # GitVersion needs full history
      - name: Tag with GitVersion
        # Call your custom GitVersion action to determine version and tag

        id: gitversion
        uses: michielvha/gitversion-tag-action@v5
        with:
          configFilePath: gitversion.yml # Path to your GitVersion config file
  lint:
    name: Lint Scripts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install shellcheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck
      - name: Run shellcheck
        run: |
          cd packaging
          make lint
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [version, lint]
    strategy:
      matrix:
        arch: [all]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up environment
        run: |
          # Use GitVersion determined version
          VERSION="${{ needs.version.outputs.semVer }}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Building version: $VERSION"
      - name: Install nfpm
        run: |
          echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
          sudo apt update
          sudo apt install nfpm
      - name: Update package version
        run: |
          cd packaging
          sed -i "s/version: .*/version: $VERSION/" nfpm.yaml
          sed -i "s/VERSION := .*/VERSION := $VERSION/" Makefile
          # Create VERSION file for runtime version detection
          mkdir -p usr/share/pds
          echo "$VERSION" > usr/share/pds/VERSION
      - name: Build package
        run: |
          cd packaging
          chmod +x build.sh
          ./build.sh build
      - name: Test package
        run: |
          cd packaging
          make test
      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ needs.version.outputs.semVer }}-${{ matrix.arch }}
          path: packaging/dist/*.deb
          retention-days: 30
      - name: Show package info
        run: |
          cd packaging
          echo "Package built:"
          ls -la dist/
          echo
          echo "Package contents (first 20 files):"
          dpkg-deb -c dist/*.deb | head -20
  test-install:
    name: Test Installation
    runs-on: ubuntu-latest
    needs: [version, build]
    strategy:
      matrix:
        ubuntu-version: [20.04, 22.04, 24.04]
    steps:
      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ needs.version.outputs.semVer }}-all
          path: ./packages
      - name: Test installation on Ubuntu ${{ matrix.ubuntu-version }}
        run: |
          docker run --rm -v $(pwd)/packages:/packages ubuntu:${{ matrix.ubuntu-version }} /bin/bash -c "
            apt-get update &&
            apt-get install -y /packages/*.deb &&
            echo 'Testing PDS installation...' &&
            pds doctor &&
            pds info &&
            echo 'Installation test passed on Ubuntu ${{ matrix.ubuntu-version }}'
          "
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [version, build, test-install]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set version
        run: |
          VERSION="${{ needs.version.outputs.semVer }}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ needs.version.outputs.semVer }}-all
          path: ./release
      - name: Generate release notes
        run: |
          # Use template file and substitute variables
          sed -e "s|{{VERSION}}|${{ needs.version.outputs.semVer }}|g" \
              -e "s|{{REPOSITORY}}|${{ github.repository }}|g" \
              -e "s|{{PACKAGE_NAME}}|${{ env.PACKAGE_NAME }}|g" \
              .github/templates/release-notes.md > release-notes.md
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.version.outputs.semVer }} \
            --title "PDS v${{ needs.version.outputs.semVer }}" \
            --notes-file release-notes.md \
            ./release/${{ env.PACKAGE_NAME }}_${{ needs.version.outputs.semVer }}_all.deb

  build-apt-repo-container:
    name: Build APT Repository Container
    runs-on: ubuntu-latest
    needs: [version, release]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download package for Docker build
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ needs.version.outputs.semVer }}-all
          path: ./packaging/dist
      - name: Build and push Docker image
        uses: michielvha/docker-release-action@main
        with:
          version: ${{ needs.version.outputs.semVer }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          project: pds-apt-repo
          platforms: linux/amd64,linux/arm64
          context: ./packaging
          build-args: |
            VERSION=${{ needs.version.outputs.semVer }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

# TODO: look into using aptly and hosting the files either on gh pages or edgeforge.eu so we can actually distribute this 
# Optional: Auto-update APT repository
# deploy-repo:
#   name: Update APT Repository
#   runs-on: ubuntu-latest
#   needs: [version, release]
#   if: startsWith(github.ref, 'refs/tags/v')
#   steps:
#     - name: Deploy to APT repository
#       run: |
#         # Add your APT repository update logic here
#         # This could involve aptly, reprepro, or a hosted service API
#         echo "Would update APT repository here"
# community option for releasing





# TODO: look into this one because it auto generates the release notes might solve our issue in the TODO above.
# - name: Create Release
#   uses: softprops/action-gh-release@v2
#   with:
#     tag_name: v${{ needs.version.outputs.semVer }}
#     name: PDS v${{ needs.version.outputs.semVer }}
#     body_path: release-notes.md
#     files: |
#       ./release/*.deb
#     generate_release_notes: true
#     make_latest: true
#     draft: false
#     prerelease: false
